Vagrant.configure(2) do |config|

  # TODO If no local key available, basic process without VScode configuration
  # TODO Ensuring it is installing Docker and centralizing the process
  # TODO Dynamic generation of servers and agents
  # TODO DHCP assignations of IP adresses for all servers in the correct range
  # TODO Verification of possible IP conflict
  # TODO Dynamic machine dir 
  

  # Before you must install these plugins to speed up Vagrant provisioning
  # vagrant plugin install vagrant-faster | WITHOUT VSCODE
  # vagrant plugin install vagrant-cachier

  # Configuration variables
  MANAGER_CPUS = 8
  MANAGER_MEM = 6000
  AGENT_CPUS = 2
  AGENT_MEM = 2048

  # Define the Wazuh server IP address (can be nil)
  WAZUH_SERVER_IP = "192.168.56.0" # Change this to a specific IP if needed (Ranges: 192.168.56.0/21)

  #  Wazuh Agent IPs
  AGENT_IP1="192.168.56.1"
  AGENT_IP2="192.168.56.2"

  config.cache.auto_detect = true

  # Set some variables
  etcHosts = ""
  clickhouse = ""
  monitoring = ""
  superset = ""
  logs = ""

  case ARGV[0]
  when "provision", "up"
    # Handle the provision and up commands if needed
  end

  # Common provisioning script
  common = <<-SHELL
    sudo apt update -qq 2>&1 >/dev/null
    sudo apt install -y -qq iftop curl software-properties-common git vim tree net-tools telnet git 2>&1 >/dev/null
    sed -i 's/ChallengeResponseAuthentication no/ChallengeResponseAuthentication yes/g' /etc/ssh/sshd_config
    sudo systemctl restart sshd
  SHELL

  # Docker installation script
  docker = <<-SHELL
    curl -fsSL https://get.docker.com -o get-docker.sh 2>&1 >/dev/null
    sudo sh get-docker.sh 2>&1 >/dev/null
    sudo usermod -aG docker vagrant
    sudo service docker start
    sudo curl -L "https://github.com/docker/compose/releases/download/1.25.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    sudo chmod 755 /usr/local/bin/docker-compose
  SHELL

  config.vm.box = "ubuntu/jammy64"
  config.vm.box_url = "ubuntu/jammy64"

  # Required functions #

  # Function to increment the IP address
  def increment_ip(ip)
    parts = ip.split('.')
    parts[3] = (parts[3].to_i + 1).to_s
    parts.join('.')
  end

  ## NODES definition ##
  
  # # Set servers list and their parameters
  # NODES = [
  #   { :hostname => "wazidx1", :ip => WAZUH_SERVER_IP, :cpus => MANAGER_CPUS, :mem => MANAGER_MEM, :type => "server" },
  #   { :hostname => "wazagent1", :ip => nil, :cpus => AGENT_CPUS, :mem => AGENT_MEM, :type => "agent" },
  #   { :hostname => "wazagent2", :ip => nil, :cpus => AGENT_CPUS, :mem => AGENT_MEM, :type => "agent" }
  # ]
  # Set servers list and their parameters
  NODES = [
    { :hostname => "wazidx1", :ip => WAZUH_SERVER_IP, :cpus => MANAGER_CPUS, :mem => MANAGER_MEM, :type => "server" },
    { :hostname => "wazagent1", :ip => AGENT_IP1, :cpus => AGENT_CPUS, :mem => AGENT_MEM, :type => "agent" },
    { :hostname => "wazagent2", :ip => AGENT_IP2, :cpus => AGENT_CPUS, :mem => AGENT_MEM, :type => "agent" }
  ]

   
  # Define /etc/hosts for all servers
  NODES.each_with_index do |node, index|
    # if node[:type] == "server"   # Correct comparison operator
    #   # Check if node[:ip] exists (not nil)
    #   if node[:ip].nil?
    #     raise "Error: IP address not found for server node '#{node[:hostname]}'"
    #   end
  
    # # Assigning IP's for other machines
    # else
    #   highest_ip = NODES[index - 1][:ip]
    #   node[:ip] = increment_ip(highest_ip)
    # end
  
    # Add the IP and hostname to /etc/hosts
    etcHosts += "echo '#{node[:ip]}   #{node[:hostname]}' >> /etc/hosts\n"
  end  # End NODES loop
  


  ## Dynamic Cleaning before any other actions ##

  # Check if the .vagrant/machines directory for the server node exists
  # machine_dir = "/home/koraty/VirtualBox VMs/wazidx1"
        
  # if Dir.exist?(machine_dir)
  #   puts "The server node 'wazidx1' already exists. We keep previous IPs."
  # else
  #   # Remove the credentials.txt file before building the machines
  #   File.delete("credentials.txt") if File.exist?("credentials.txt")
  #   puts "First building of the server, cleaning ..."
  # end

  
  # Run installation
  NODES.each_with_index do |node,index|
    

    
    config.vm.define node[:hostname] do |cfg|

      # Cleaning #
      if index == 0
        cfg.vm.provision "shell", path: "cleaner.sh"
      end

      cfg.vm.hostname = node[:hostname]
      
      # Set the network configuration
        
      cfg.vm.network "private_network", ip: node[:ip]
      puts "Set #{node[:hostname]} IP to #{node[:ip]}"
      
      cfg.vm.provider "virtualbox" do |v|
        v.customize ["modifyvm", :id, "--cpus", node[:cpus]]
        v.customize ["modifyvm", :id, "--memory", node[:mem]]
        v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
        v.customize ["modifyvm", :id, "--name", node[:hostname]]
        v.customize ["modifyvm", :id, "--ioapic", "on"]
        v.customize ["modifyvm", :id, "--nictype1", "virtio"]
      end

      # Provisioning
      # For all
      cfg.vm.provision :shell, :path => "install_xavki.sh"
      cfg.vm.provision :shell, :inline => etcHosts
      cfg.vm.provision :shell, :inline => common
      cfg.vm.provision :shell, :path => "install_node_exporter.sh"

      # Copy the configuration script to the VM
      cfg.vm.provision "file", source: "wazuh_config.sh", destination: "/home/vagrant/wazuh_config.sh"

      # Make the script executable
      cfg.vm.provision "shell", inline: <<-SHELL
        chmod +x /home/vagrant/wazuh_config.sh
      SHELL

      # Execute the configuration script
      cfg.vm.provision "shell", inline: <<-SHELL
        /home/vagrant/wazuh_config.sh
      SHELL

      # Add the SSH key to the root user's authorized_keys file
      cfg.vm.provision "shell", inline: <<-SHELL
        sudo mkdir -p /root/.ssh
        sudo chmod 700 /root/.ssh
        echo "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOKaytswjNm0jowz8c8Ss8QC5D6UwN+tVmfBYXx1pr7L antony.davi@centrale.centralelille.fr" >> /root/.ssh/authorized_keys
        sudo chmod 600 /root/.ssh/authorized_keys
      SHELL

      if node[:type] == "server"
        # Install Wazuh server
        cfg.vm.provision "shell", path: "install_wazuh_server.sh"
      end

      if node[:type] == "agent"
        cfg.vm.provision "shell", path: "install_wazuh_agent.sh"
      end
    end # End config
  end # End nodes
  
end


## Final logs ##

# Append the message to the end of credentials.txt
File.open("credentials.txt", "a") do |file|
  file.puts "\nPlease, check the IP's to ensure there isn't any conflict"
end

puts "Added IP conflict warning to credentials.txt."