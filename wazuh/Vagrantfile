Vagrant.configure(2) do |config|
  # TODO If no local key available, basic process without VScode configuration
  # TODO Ensuring it is installing Docker and centralizing the process
  # TODO removing the credential.txt file while running a vagrant up
  # Before you must install these plugins to speed up Vagrant provisioning
  # vagrant plugin install vagrant-faster | WITHOUT VSCODE
  # vagrant plugin install vagrant-cachier

  # Configuration variables
  # Remove specific IP addresses for DHCP
  # Wazuh Server IP (commented out for DHCP)
  # WAZUH_SERVER_IP = "192.168.56.12"  

  # HARDWARE #
  # CPU and Memory configurations
  MANAGER_CPUS = 8
  MANAGER_MEM = 6000
  AGENT_CPUS = 2
  AGENT_MEM = 2048

  config.cache.auto_detect = true

  # Set some variables
  etcHosts = ""

  case ARGV[0]
  when "provision", "up"
    # Handle the provision and up commands if needed
  end

  # Some settings for common server (not for haproxy)
  common = <<-SHELL
    sudo apt update -qq 2>&1 >/dev/null
    sudo apt install -y -qq iftop curl software-properties-common git vim tree net-tools telnet git 2>&1 >/dev/null
    sed -i 's/ChallengeResponseAuthentication no/ChallengeResponseAuthentication yes/g' /etc/ssh/sshd_config
    sudo systemctl restart sshd
  SHELL

  # Removing conflicting files before each set up


  docker = <<-SHELL
    curl -fsSL https://get.docker.com -o get-docker.sh 2>&1 >/dev/null
    sudo sh get-docker.sh 2>&1 >/dev/null
    sudo usermod -aG docker vagrant
    sudo service docker start
    sudo curl -L "https://github.com/docker/compose/releases/download/1.25.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    sudo chmod 755 /usr/local/bin/docker-compose
  SHELL

  config.vm.box = "ubuntu/jammy64"
  config.vm.box_url = "ubuntu/jammy64"

  # Set servers list and their parameters
  NODES = [
    { hostname: "wazidx1", ip: nil, cpus: MANAGER_CPUS, mem: MANAGER_MEM, type: "server" },  # DHCP for server
    { hostname: "wazagent1", ip: nil, cpus: AGENT_CPUS, mem: AGENT_MEM, type: "agent" },  # DHCP for agent
    { hostname: "wazagent2", ip: nil, cpus: AGENT_CPUS, mem: AGENT_MEM, type: "agent" }   # DHCP for agent
  ]

  # Run installation
  NODES.each do |node|
    config.vm.define node[:hostname] do |cfg|
      cfg.vm.hostname = node[:hostname]
      
      # Set the network configuration
      cfg.vm.network "private_network", type: "dhcp"
      # Provisioning logic
      cfg.vm.provision "shell", inline: <<-SHELL
        #!/usr/bin/env bash
        # Wait for a moment to ensure the network is up
        sleep 10

        # Get the assigned IP address
        ASSIGNED_IP=\$(hostname -I | awk '{print \$1}')

        # Define the path to the credentials file
        CREDENTIALS_FILE=/vagrant/credentials.txt

        # Check if the credentials file exists
        if [[ -f "\$CREDENTIALS_FILE" ]]; then
          # Read existing IPs from the credentials file
          EXISTING_IPS=\$(cat \$CREDENTIALS_FILE | awk '{print \$4}')

          # Loop to check for duplicate IPs
          while echo "\$EXISTING_IPS" | grep -q "\$ASSIGNED_IP"; do
            # If a duplicate IP is found, increment the last octet
            IFS='.' read -r i1 i2 i3 i4 <<< "\$ASSIGNED_IP"
            i4=\$((i4 + 1))
            ASSIGNED_IP="\$i1.\$i2.\$i3.\$i4"
          done
        fi

        # Log the assigned IP to the credentials file
        echo "Node: #{node[:hostname]} - IP: \$ASSIGNED_IP" >> \$CREDENTIALS_FILE
      SHELL

      cfg.vm.provider "virtualbox" do |v|
        v.customize ["modifyvm", :id, "--cpus", node[:cpus]]
        v.customize ["modifyvm", :id, "--memory", node[:mem]]
        v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
        v.customize ["modifyvm", :id, "--name", node[:hostname]]
        v.customize ["modifyvm", :id, "--ioapic", "on"]
        v.customize ["modifyvm", :id, "--nictype1", "virtio"]
      end # End provider

      # Provisioning
      cfg.vm.provision :shell, :path => "install_xavki.sh"
      cfg.vm.provision :shell, :inline => common
      cfg.vm.provision :shell, :path => "install_node_exporter.sh"

      # Copy the configuration script to the VM
      cfg.vm.provision "file", source: "wazuh_config.sh", destination: "/home/vagrant/wazuh_config.sh"

      # Make the script executable
      cfg.vm.provision "shell", inline: <<-SHELL
        chmod +x /home/vagrant/wazuh_config.sh
      SHELL

      # Execute the configuration script
      cfg.vm.provision "shell", inline: <<-SHELL
        /home/vagrant/wazuh_config.sh
      SHELL

      # Add the SSH key to the root user's authorized_keys file
      cfg.vm.provision "shell", inline: <<-SHELL
        sudo mkdir -p /root/.ssh
        sudo chmod 700 /root/.ssh
        echo "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOKaytswjNm0jowz8c8Ss8QC5D6UwN+tVmfBYXx1pr7L antony.davi@centrale.centralelille.fr" >> /root/.ssh/authorized_keys
        sudo chmod 600 /root/.ssh/authorized_keys
      SHELL

      if node[:type] == "server"
        # Install Wazuh server
        cfg.vm.provision :shell, :path => "install_wazuh_server.sh"

      #   # Extract and save credentials to a file on the host machine
      #   cfg.vm.provision "shell", inline: <<-SHELL
      #     sudo tar -axf wazuh-install-files.tar wazuh-install-files/wazuh-passwords.txt -O | grep -P "'admin'" -A 1 > /vagrant/credentials.txt
      #   SHELL
      end

      if node[:type] == "agent"
        cfg.vm.provision :shell, :path => "install_wazuh_agent.sh"
      end

    end # End config
  end # End nodes

  # # Capture the assigned IP addresses for all nodes
  # config.vm.provision "shell", inline: <<-SHELL
  #   sleep 10  # Ensure network is up
  #   for node in #{NODES.map { |node| node[:hostname] }.join(' ')}; do
  #     IP=\$(vagrant ssh -o StrictHostKeyChecking=no vagrant@\$node 'hostname -I | awk '\''{print \$1}'\'') || true
  #     echo "Node: \$node - IP: \$IP" >> /vagrant/credentials.txt
  #   done
  # SHELL

end
